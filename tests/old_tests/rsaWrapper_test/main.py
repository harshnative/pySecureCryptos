import sys
sys.path.append("/media/veracrypt64/Projects/pyModules/pySecureCryptos/pySecureCryptos")

from pySecureCryptos import rsaWrapper

def generateKey():
    keyGenObj = rsaWrapper.KeyGenerator()

    privateKey_bytes = keyGenObj.get_privateKey_bytes()
    privateKey_Byte = keyGenObj.get_privateKey_Byte()

    publicKey_bytes = keyGenObj.get_publicKey_bytes()
    publicKey_Byte = keyGenObj.get_publicKey_Byte()


    with open("publickey.txt" , "wb") as file:
        file.write(publicKey_bytes)


    with open("privateKey.txt" , "wb") as file:
        file.write(privateKey_bytes)


myByte = b"hello world"

encByte1 = b"""\x9a=\xcbh\'[\xa8\xec:\xce\x88\x9f\xf5\xfd\xbe\x93`\xb6\n\xea_\xaf\xf5\xfaZR\xccl\t\xa5\xb7\x15\xbd*O?Xx\xf1\x95~\x89(\xd1"\xaa\xad\x86\xe5y\xb79\x97\xc5\xf5\xdb\x17\xda\xcc\x85\xd1)\x1c\x0b\xd2}\x19\xc5\xf9\x18i~\x9a?\x0c\xdb\xb0y\x8e\xa4\x7f\xb5\xa7j\xde\x9cB\x9bQ\x85\xcb\x1e7}\xc7\xc5\xa1G\xe5\x08\x92\xf5\x1d\x16X\x07\x07\xd3\xeb\xa3\xdaJ\xc9Kr\xff\xbcYM\xc8\x03\x10\xa2\xb2\x86z#_|\x00\x13\xb5Q. \xd2\r\x1d\xc0\x07\xe3A\x0e0\x84\xf9XKM\x99\xdf\x96\xa6\xd8\xa2\xb2\xa3\x9a\xdb\xafL\xb8W\xea2\xcf\x05;J\x98\'\x99\x84\xd4"\xc4\x81vt\x8c\x11\xb9\x9f6\x92Y\xc1\xed\x8c]\xa0\xbar\x0e5\xf9J\xf4&\x03\x9cI\x9eQgy7\x91_\x14\x1b\xa8\xb5\xd7{\xcc\xd4K@\x0er\x89bu\xb6*}9\xde\xd71l\xd0\x10\x07\x06u\x11\xdc\xcc)\xe0\xe4l\x10\xc5N\xf0{\xd0\x95\xd0m\x02Ud\xb4=!\xddoH\xfc\xb9\xf9\xdf\x85\xb2&\xbdj\xc4\x1b\x8c\xaa\xa2 \xcd\\rD\x9a\xcf\xb3\x1d\xac=&\xd3\x9f`\xe0\xa2<\xb92\xd5\x8c$\xfe{6,\xadaV\x8fwT\xab\x9c\x81\x85\x92b\xe5yK\ny\xf1}\xb5\xe5N/\xbb\xbet\xcb\xd1Fz\xb29\xffp\xac \xd3\xf2^5\x0b\x85\x9b\\\x0epI\xe0\xffkr\x9f|6\xb9\x1at\xb4\xab\xc2\xb1!\x062f\xbcg\xb51\xebN{\xfb\x1c\xfb]<+\xca\xd1\x91\xe2\x8aw~\x88\xb8\xdb\xa9\xceMyA\x88\x1d\xce*|n9W\x1b\xf6O\xa7Q9\xc77\xf1p2G\x0c^\xd7\x13\xcd\x9f\xcdm\x1e\xc7\xeb6\xb8\xc8H\xf5 \x91hD\xbb\t\x15\xf8L;\xbb\xa9SX\x8d\xa7\xd8\xbd#\x1e\xbb\xe7\x17\xb2V\x8aEdp\xc55\xe0R}\x82L\x1b\x07\xf8\x0e\xf6LL\x1c52\xfbt\xe9tvC\x9d\x99\xf4o\x017\xc8:\x1c\xad\xb7`\xe5Uzf6\x9b\xa3\xe7\xac\xde)\xd7q \xb9n:checksum:iR\xe9\x0f\x00V\xc3\xb1\xfe6\xed\xbfw\xc4RL\xbet2YV\x84\xdf\xc7z\xaf\xe3\xd6b8]\xe5ij\xb63\x81\xad\xe0\xb6v\xd1\xea\xa2\x94*\x97\x14)\xac\x03\x90\xc1\x9f\xdf$\x19\xc4\x0b\xbe\t\x91L_v\x92m\x81)\xbd\xda\xaa~\x0e\xcf\x8d\xd82lMi\x81\xcd\x10q\xec\x07C\xfdC\xd7\xf4\x9b\xd8\\\xf4!`\x12\x94\xd8d\x88\x8e\xf2\xc1\xaf\xed\x03q\xddQ\xe4\x03z\xed\r>jt\xa1\x88\x82\xf5/~\xdf\x03\t\x9dD\xa4\xad\xff\nv\xfdp\xb6b\xe7\xdd\xab\xeb\x0b\x82=h\x7f\x07\xa7\xf1\xa1 \x1a;\x9e\x12Bw\x98\xbf9\\`(\xb6X\xd2iY\x10WN\xd1{\x1a*\xb2t\xf1L?\xc7\xfa\xfepo\xab\xc1\x9f\xdc\xc4$v3q\x06:\xe9\xb5\xe7\xe0\xc0S\xe0\x85\x0e\xb3\xb2\x82\x00\xac\x8dz\x86\x01\xdb\x9c\xadQ\xde@4\xb4\xbc\xf7\xd44\xb9P\x05\x18\xe2tw*\xd1&cj6\x13\x8a\x17\xb3;i\x18\xab^\xab\n9\xces\x14\xaf\x15\xf5%\xca\xec\xa4b*\xb6\x9b\xce\xa5\x03d\xc9}\xf4 \xb8:\xb1#\xde\xff"/\x8bf\xd6zg\x90\xfe\xefX\x0c@D\xcb\x03\x1d\xd3>\xfe\xef\xe8\xac\xd7\xb1\x7f\xc3\x12_s\xe5\xf3\xd6\xbe\x81\x8b\x7f\xdc\xcc}5i\xb7\xa3\xa1\xaa\xd2\x90\xd7\x8b\x03\x8c\xaf\xe8}\xca\x16\xb6\xb34\xfa\x8bi{\x9cgG-\xd2\xb6+\x84\x15r-\x8bg!\x18<\xb6\xff\xef\x80S\xe9\xf0\xf8\xc0-\x9a\xb8\xcf28U3&`\xb8:\xf3\x8c\x9f\xc6K\xaa\x03\xe2d\xa9\x15U\xb6\xb4\xcd\xc9\xf9\xa2i7\x02JF\xc6\xf9~\xdb\x9d\xf9N\xc1\xa0.\xb2\x05\xde\x89-\\}EY\xec\x86\x18VA\x00=\xf0\x02\xdc\x11a\xd3t\x0c\xccmN@K\xfb\xdd!\xe9s\xfb\t\xf0\xefVL\xe4GlD,j\xd1aa\x88\xed\xdfn\xe3<\xc3#|fEa@ \xfc\xa9\x05\x9b\x02\xda\xa1:\x9bEJ\xea=\xa2uyz\x9f k7\x0e1\r\xd3\xfb\x8d\'j\x17)\xe4\x99"""

encByte2 = b"""$\xbf\xc8{\x80\xe8G\xb4X\xf3\xb0\xf4G\x97\x1c\x90\xe8\xe4c\xd2n5H\r\x93\xf1Y\xbb\xea\x80\xd4\xcd\xa8!\xacw\x99\\\x967\x8f\xe2|\x94\x8a\xc1\xe8\xd0<\xc7H6\xf4\xb4\xc30\x9ct&\xfe\x11\x863+_\xc9y\x0b\xea\xdf\x10\xe4P\xf7wC\x9f\x8e\x19\x03\xc2i\x8d(\x91\xb8_\x1e4\xa2\x1f\xda"\xc5\xdf\x85\x7f\x07 \xad\xcb:\x85\xd55\x1e5\x81W\xea\r\x17S\xa0UO\x7f\x0f\x9b\xd3\x83\xca\x8f\xfcz\x03K\xe2D\x87Y\xbf\xf6;\x87\x9d\xc4w>z\x0b\x88\xcc\xaem\x9e\xf2y\xb3\xaf|5\x1d\x83`,\xa5\x1b\xaaC\x02\xa4g\x07\x16\xce\x88\xc5"\xa1mi\x80\x18ldn\xa7\xa8\xf7u\x02\xec6\xf3\x1e\xe8\x8f\xce\x87\x8e\x8cR\xcf\xe1\xfex\xe7]\x0261\x9c\xff_j\xbe@qw\xbfL\xc8\x91SR\xe2y\xa6\xa4.b\x15i\x97:\xc3\xe4\xbdn_\x91d\x07\x0f\xe6\xd6\xdddo\x06\x13(s\xa2\xec\x0f\xd4\x8c|\xed?\x08\x85\xa4l\xe0j5\x02\x0e\x8e\xb5\x95\xed\x81(\x9a\xe90\n $lO1h\xcc\xdf\\\xba\t\xc2\x97\x8a\xf5\x95c\xb4\x83\x01B\x9a\x13\xed\x94[11\xcf\xce\x83\x84\xcb4X)\x8e\x97\xc3G\xc3\xaa\n\xd8t\x00\nu"\xf5\xa6/\x88q\xdcp,\xbe\x07\xa1\xf7\xf6\xea;\x11HJ\xf6\xad,\x85"-7\xedY\xdb\t\'\x9d\xab\x82\x96\xdbbV\xf9j\x9b\xddu\xbd\xd5\xdb\xf6\x9fjZ\xd8M\x03\xc19\x9f\x93S\xfa\xcf%rN[\xbb\x1cp\xfa\x04\xe1g\x10\xb4\xa2\x89\xc2\x94\x04\xc6\xdd\x87d4*\xa1\xe1\x9fM\xf1\xdfz\x9d\x87\xf5\xe1\x88\xb9gf\xb5\xd1\xf8?<\xd4\x8a?\x0f\xdd\xfa\x10\x18\xad+\xffU\x0c\xcd\xb8o\xf6\xbe\x8d\xaf{\xe6\xa5\x9d\x19)\xfd\x8e53-\x17\xcdA\xb9K\xb2\xcd\x84\x13j:\xa3\xd8:\x0c\x0e5>\t\x7f\x16\x17!-d~\xe6\x9bz\xa6\xc2\xd2\x8cx\xc9\xb8\x933f\x07\xdc\xf2E\x1e\xee}\xf82\x1b\xa6\xc9\x17|f\x07\x169\xe0:checksum:.\xc1\xc5\xef\x8c|\xd6\x9f\x8dA\xff\x1cB\xac\xef#:\x8b\xae\xf0\xb8\xef~\x8c\x7fAIeoK\xad\x17H)\x0eB\x12\xd6H\x01$\xc1\xb4\x1dX\x9f\x9fv\xd9\xa7 \xef\xe73\xca9\xbc\xde\xdb\xaa~wL^\x8b\x84\x95\x90n\x10Wr\x7f^\x16\x19\xe7\xde\xcb\xcf\xdc\x10\xcf\xf6`\xc1\x83\xf5\xf1\xe5U[\x0f\xd3\x90\xd0\xb9H\x98\xac \xb1\'l\x02g\x04\x83\xed\xf9\x8f\xcbmR\xe5\x1e\xb8\x12\x87?\xe8\xf4`\xee\x14\xd7\x8cxf(\xcc\xa3\x19*\x15C\n\xe74\x80\xf7\xb7\x82\xa9\xe921/PF\xde\xddk\xd9K\x111W\xaf\xd1[`JE*\xddF!\xa4\xe9\x1ec\xf11\xc0;\xc9\xb4\x7f\xe0\x81v\xb0\xeao\x17z\xf5?\x80\xdbwl"\xcc>\xb1 \x84\xd8\x90\x03{\x82\xdb\xcf?\xaee\xac{hv\xc2\xa5\xd3\x14\x86\x99\xb2Uo\xd4\xd1w{\xc1\xdf\xf1A\xce\x9a\n\xa6\x19\x8f\xd4\x0e\xb2i\xf8\xb3\xe5s\xc5C5\xf7\'_\x99\xdew\x1b\n\xd2cG\x81\x03fs\x81\xd9\x01(\x89\'\xd4v\xc8P`q\xaa\x9c\xac\xa7Q\x9f/7\xed\x94\x98=8\xff\xcb\x9d\xbf\xdd\xa2&\xe1a\x8d\xcbB\x94es\xd2^~\x03=WiNG(\xdf\xc4}\x08\xadmh\x90[\x19\x07\x7fT\x1f\xc8\xd8M\x99s\xa9g\x932\x81\xfd\xce11\x93\x10\xe7\xc4\xa8\x08\xd8\x8c\xfb\x11%!\x8c\xdb\x11\xae\x00a]\x0b\x87\xb9G\xb1\x00\x96\xfe%m\xef\x99\x9c\x9b\xae\xa0as\xfa\x9c\x08\xec\xb1\xe2\xd5\xe4\x8b\xaf\xfd_\x17El\x97{\xc8\x8d|\x08\xec\x17\xcd2\xbc=\xe0\xcd\xcf\x07\xb6\xc43\x03\xe6\xb9\xe2\xcby[\x80\x9f\xf5\xd9\xc3\t\xd3*m]l\xdfns\xff\xa3\x16\xca\x96&\x9dz\x9b\xc7z\x1d\x90}\xd9l6\xa3\x96\t\x87\xec\xea@\xb0@\xbc=\xf0\xb9\x0f\xa0\x91\x1dZb\x84\x83R\xc0\xb9\xd3f\x82\xaf|\xf8\xebO\xca\xce\x84\xd2\xcd\xd5FQD\x84\xa4y\xe4\xff\xe3/\x8bW\xaf\xd6\xfc\xbbd\xf49%\xe0(\x91\xa8\xdd"""



def enc():
    with open("publickey.txt" , "rb") as file:
        publicKey_bytes = file.read()


    with open("privateKey.txt" , "rb") as file:
        privateKey_bytes = file.read()


    encObj = rsaWrapper.Encryptor(publicKey_bytes , privateKey_bytes)

    encryptedByte1 = encObj.encrypt_byte(myByte)

    genObj = encObj.encrypt_byte_yield(myByte)

    while(True):
        try:
            _ , _ = next(genObj)
        except StopIteration as ex:
            encryptedByte2 = ex.value
            break

    print(encryptedByte1)

    print('\n\n')

    print(encryptedByte2)





def dec():
    with open("publickey.txt" , "rb") as file:
        publicKey_bytes = file.read()


    with open("privateKey.txt" , "rb") as file:
        privateKey_bytes = file.read()


    encObj = rsaWrapper.Encryptor(publicKey_bytes , privateKey_bytes)

    decryptedByte1 = encObj.decrypt_byte(encByte1)

    genObj = encObj.decrypt_byte_yield(encByte1)

    while(True):
        try:
            _ , _ = next(genObj)
        except StopIteration as ex:
            decryptedByte2 = ex.value
            break



    if(decryptedByte1 == decryptedByte2 == myByte):
        print("ok")

    else:
        print("error")







def dec2():
    with open("publickey.txt" , "rb") as file:
        publicKey_bytes = file.read()


    with open("privateKey.txt" , "rb") as file:
        privateKey_bytes = file.read()


    encObj = rsaWrapper.Encryptor(publicKey_bytes , privateKey_bytes)

    decryptedByte1 = encObj.decrypt_byte(encByte2)

    genObj = encObj.decrypt_byte_yield(encByte2)

    while(True):
        try:
            _ , _ = next(genObj)
        except StopIteration as ex:
            decryptedByte2 = ex.value
            break



    if(decryptedByte1 == decryptedByte2 == myByte):
        print("ok")

    else:
        print("error")



if __name__ == "__main__":
    # generateKey()
    dec()
    dec2()
    pass